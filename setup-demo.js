#!/usr/bin/env node

/**
 * Samanin Frontend Setup & Demo Script
 * 
 * This script helps set up and demonstrate the ? User Registration functionality
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üöÄ Samanin Frontend - ? Setup & Demo\n');

// Check if we're in the right directory
const packageJsonPath = path.join(process.cwd(), 'package.json');
if (!fs.existsSync(packageJsonPath)) {
  console.error('‚ùå Error: package.json not found. Please run this script from the frontend directory.');
  process.exit(1);
}

// Check Node.js version
const nodeVersion = process.version;
const majorVersion = parseInt(nodeVersion.slice(1).split('.')[0]);
if (majorVersion < 18) {
  console.error(`‚ùå Error: Node.js ${majorVersion} detected. Please use Node.js 18 or higher.`);
  process.exit(1);
}

console.log(`‚úÖ Node.js ${nodeVersion} detected`);

// Install dependencies if node_modules doesn't exist
if (!fs.existsSync(path.join(process.cwd(), 'node_modules'))) {
  console.log('üì¶ Installing dependencies...');
  try {
    execSync('npm install', { stdio: 'inherit' });
    console.log('‚úÖ Dependencies installed successfully\n');
  } catch (error) {
    console.error('‚ùå Failed to install dependencies:', error.message);
    process.exit(1);
  }
} else {
  console.log('‚úÖ Dependencies already installed\n');
}

// Check if .env.local exists
const envPath = path.join(process.cwd(), '.env.local');
if (!fs.existsSync(envPath)) {
  console.log('‚öôÔ∏è Creating .env.local file...');
  fs.writeFileSync(envPath, 'NEXT_PUBLIC_API_BASE_URL=http://localhost:3000/api\n');
  console.log('‚úÖ .env.local created\n');
}

// Display setup information
console.log('üéØ ? Implementation Features:');
console.log('   ‚úÖ User Registration Form');
console.log('   ‚úÖ Bilingual Support (Persian/Arabic)');
console.log('   ‚úÖ RTL Layout Support');
console.log('   ‚úÖ Real-time Form Validation');
console.log('   ‚úÖ Password Strength Indicator');
console.log('   ‚úÖ Responsive Design');
console.log('   ‚úÖ Accessibility (WCAG)');
console.log('   ‚úÖ API Integration');
console.log('   ‚úÖ Error Handling\n');

console.log('üåç Supported Languages:');
console.log('   üáÆüá∑ Persian (ŸÅÿßÿ±ÿ≥€å) - Default');
console.log('   üá¶üá™ Arabic (ÿπÿ±ÿ®Ÿä)\n');

console.log('üìã API Integration:');
console.log('   üìç Backend URL: http://localhost:3000/api');
console.log('   üîó Registration Endpoint: POST /auth/register');
console.log('   üìÑ Following ? API Contract\n');

console.log('üöÄ To start the development server:');
console.log('   npm run dev\n');

console.log('üåê Then open:');
console.log('   http://localhost:3001\n');

console.log('üîß Available Scripts:');
console.log('   npm run dev     - Start development server');
console.log('   npm run build   - Build for production');
console.log('   npm run start   - Start production server');
console.log('   npm run lint    - Run ESLint');
console.log('   npm run type-check - TypeScript type checking\n');

console.log('üìö Testing the Registration Flow:');
console.log('1. üåç Test language switching (Persian ‚Üî Arabic)');
console.log('2. üìù Fill out the registration form');
console.log('3. üîí Test password strength indicator');
console.log('4. ‚úÖ Submit form and check API integration');
console.log('5. üé® Test responsive design on different screen sizes\n');

console.log('üìã Form Fields (Per ? Requirements):');
console.log('   ‚Ä¢ Full Name (2-100 chars)');
console.log('   ‚Ä¢ Email Address (unique, valid format)');
console.log('   ‚Ä¢ Password (8+ chars, mixed case, numbers, symbols)');
console.log('   ‚Ä¢ Confirm Password (must match)');
console.log('   ‚Ä¢ Company/Business Name (2-200 chars)');
console.log('   ‚Ä¢ Language Selection (Persian/Arabic)');
console.log('   ‚Ä¢ Locale Selection (Iran/UAE)\n');

console.log('üéØ Business Rules Implemented:');
console.log('   BR01: ‚úÖ Email uniqueness validation');
console.log('   BR02: ‚úÖ Automatic tenant creation (backend)');
console.log('   BR03: ‚úÖ Tenant Owner role assignment (backend)');
console.log('   BR04: ‚úÖ Company name requirement');
console.log('   BR05: ‚úÖ Language/locale selection');
console.log('   BR06: ‚úÖ Password security requirements');
console.log('   BR07: ‚úÖ No auto-login after registration\n');

console.log('üîç Error Scenarios to Test:');
console.log('   ‚Ä¢ Email already exists (409)');
console.log('   ‚Ä¢ Password policy violations');
console.log('   ‚Ä¢ Password confirmation mismatch');
console.log('   ‚Ä¢ Missing required fields');
console.log('   ‚Ä¢ Network/server errors\n');

console.log('‚ú® Ready to start! Run "npm run dev" to begin.\n');

// Optionally start the dev server
const args = process.argv.slice(2);
if (args.includes('--start') || args.includes('-s')) {
  console.log('üöÄ Starting development server...\n');
  try {
    execSync('npm run dev', { stdio: 'inherit' });
  } catch (error) {
    console.error('‚ùå Failed to start development server:', error.message);
    process.exit(1);
  }
}
